<!DOCTYPE html>
<html lang="en">
<head>
    <title>Bootstrap Example</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="/bootstrap/dist/css/bootstrap.css">
    <link rel="stylesheet" href="/css/main.css">
    <script src="/jquery/dist/jquery.min.js"></script>
    <script src="/bootstrap/dist/js/bootstrap.min.js"></script>
    <script src="/jsnlog.js/jsnlog.js"></script>

    <script src="js/recorderjs/audiodisplay.js"></script>
    <script src="js/recorderjs/recorder.js"></script>
    <script src="js/recorderjs/audioMain.js"></script>
    <link rel="stylesheet" href="/css/audioCss.css">
    <link rel="stylesheet" href="/css/trackTap.css">
</head>
<body>

<div class="container">

    <div id="top" class="row panel-body ">
        <div id="cameraDiv" class="col-lg-1">
            <span><video id="camera" autoplay></video></span>
        </div>

        <div id="spinner" class="col-lg-1 " >
            <span class="vcenter">  <% include partials/timer.ejs %></span>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-4">
            ...........
        </div>
        <div class="col-sm-4">
            ...
        </div>
        <div class="col-sm-4">
            ...
        </div>
    </div>
    <div id="videoContent" class="text-center">
        <video id="video" width="100%" height="100%"></video>
    </div>
    <div id="trackTap" style="display: none">
        <table>
            <tr>
                <td id="td[0]" onclick="hit(0)"></td>
                <td id="td[1]" onclick="hit(1)"></td>
            </tr>
            <tr>
                <td id="td[2]" onclick="hit(2)"></td>
                <td id="td[3]" onclick="hit(3)"></td>
            </tr>
            <tr>
                <td id="td[4]" onclick="hit(4)"></td>
                <td id="td[5]" onclick="hit(5)"></td>
            </tr>
        </table>
    </div>
    <div id="viz" >
        <canvas id="analyser" width="1024" height="400" style="display: none"></canvas>
    </div>

    <div id="instructionText" style="display: none"></div>

    <div id="controls" style="display: none">
        <img id="record" src="images/mic128.png" onclick="toggleRecording(this);" style="display: none">
        <a id="save" href="#" style="display: none"><img src="images/save.svg"></a>
    </div>
    <div id="button" class="row text-center">
        <button id="nextButton" type="button" class="text-center btn-lg " font-size="16px">Next</button>
    </div>
</div>

<script>
    var td = new Array(),      //保存每个格子的地鼠
        playing = false,       //游戏是否开始
        score = 0,             //分数
        total = 0,
        beat = 0,              //鼠标点击次数
        success = 0,           //命中率
        knock = 0,             //鼠标点中老鼠图片次数
        gameInterId = null,        //指定setInterval()的变量
        gameTimerId = null;         //指定setTimeout()的变量

    //游戏结束
    function GameOver(){
        timeStop();
        playing = false;
        clearMouse();
    }

    //主动停止所有计时
    function timeStop(){
        clearInterval(gameInterId);//clearInterval()方法返回setInterval()方法的id
        clearTimeout(gameTimerId);//clearTime()方法返回setTimeout()的id
    }

    //随机循环显示老鼠图片
    function show(){
        if(playing)
        {
            if(total == 10) {
                GameOver();
                return;
            }
            var current = Math.floor(Math.random()*6);
            //这里的路径也需要根据自己的实际文件路径来修改
            document.getElementById("td["+current+"]").innerHTML = '<img src="assets/images/Target_Off.png" height="160px" width="160px">';
            ++total;
            //使用setTimeout()实现2秒后隐藏老鼠图片
            setTimeout("document.getElementById('td["+current+"]').innerHTML=''",1500);
        }
    }

    //清除所有老鼠图片
    function clearMouse(){
        for(var i=0;i<=5;i++)
        {
            document.getElementById("td["+i+"]").innerHTML="";
        }
    }

    //点击事件函数，判断是否点中老鼠
    function hit(id){
        if(playing==false)
        {
            return;
        }
        else
        {
            beat +=1;
            if(document.getElementById("td["+id+"]").innerHTML!="")
            {
                score += 1;
                knock +=1;
                success = knock/beat;
                document.getElementById("td["+id+"]").innerHTML="";
            }
            else
            {
                score += -1;
                success = knock/beat;

            }
        }
    }

    //游戏开始
    function GameStart(){
        playing = true;
        show();
        interId = setInterval("show()",1500);
    }
</script>

<script>
    function audioOrVideoNotEnabled(text) {
        audioLevel = audioLevelOptions.NoMicrophone;
        var audio = new Audio('/assets/Audio/EnableInterviewAccess.mp3');
        audio.play();
        audio.onended = function() {
            window.location.href= '/?error='+text
        };
    }

    var camera = document.getElementById('camera');
    //var canvas = document.querySelector('canvas');
    //var ctx = canvas.getContext('2d');
    //var image = document.querySelector('img');
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;

    window.URL = window.URL || window.webkitURL;
    if (navigator.getUserMedia) {
        navigator.getUserMedia({ video: true,audio:false},
            function(stream) {
                camera.src = window.URL.createObjectURL(stream);
                camera.onloadedmetadata = function(e) {
                    camera.play();
                };
            },
            function(err) {
                audioOrVideoNotEnabled("The following error occured: " + err.name);
            }
        );
    } else {
        audioOrVideoNotEnabled("Your Browser doesn't support video");
    }
</script>

<script>
    var audioFolder = "assets/Audio/items/"
    var videoFolder = "assets/Video/"
    var imageFolder = "assets/Images/"

    var analyser = document.getElementById("analyser");
    var video = document.getElementById("video");
    var camera = document.getElementById("camera");
    var nextButton = document.getElementById("nextButton");
    var instr = document.getElementById("instructionText");
    var trackTap = document.getElementById("trackTap");
    var questionList;
    var item;
    var responseStartTime, responseEndTime;
    var index = -1;

    JL("client").info("Interview started");

    function takePicturePeriodically(intervalInSeconds) {

    }
    function processItem(stream) {
        ++index;
        if(index>=questionList.length) return;
        item = questionList[index];
        console.log("#############now processing --- " + item.type + " : " + item.item);
        console.dir(item);
        switch (item.type) {
            case 2000:
                if(item.item == 1) {
                    processVolumeChecker(stream, item);
                } else if(item.item == 2) {
                    processMicrophoneChecker(stream, item);
                } else {
                    processInstruction(stream, item);
                }
                break;
            case 2023:
                processDescribeSilentVideo(stream, item)
                break;
            case 2001:
            case 2041:
            case 2044:
            case 2065:
            case 2066:
            case 2067:
            case 2068:
            case 2069:
            case 2070:
            case 2071:
            case 2072:
            case 2073:
            case 2074:
            case 2100:
                if(item.item==0) processInstruction(stream, item); //item 0 has no recording
                else processAudioQuestion(stream, item);
                break;
            case 2032:
                processTrackTap(stream, item);
                //processItem(stream);
                break;
            case 2040:
                processRetellStory(stream, item);
                break;
            case 2050:
                //This type doesn't exist yet
                processStroop(stream, item);
                break;
            case 2080:
                //This type doesn't exist yet
                processInterpretResponse(stream, item);
                break;
            case 2081:
                //This type doesn't exist yet
                processFindErrorResponse(stream, item);
                break;
            case 2082:
                //This type doesn't exist yet
                processCalcuationResponse(stream, item);
                break;
            case 2062: //bypass the following two for now
                if(item.item==0) {
                    processInstruction(stream, item);
                } //item 0 has no recording
                else {//processNameTheFace(stream, item);
                    processItem(stream);
                }
                break;
            case 2064:
                //processQuickLit(stream, item);
                processItem(stream);
                break;
            default:
                processItem(stream);
                break;
        }
        /*
        if(question.type=="audio") {
            var audio = new Audio(question.source);
            console.log("playing audio with souce --- " +question.source );

            audio.onended = function() {
                console.log("playing audio ended--- " +question.source );

                canvas.style.display = "inline";
                gotStream(stream);
                toggleRecording(recordButton);
                startTimer(question.timeout, 50, function() {
                    toggleRecording(recordButton);
                    canvas.style.display="none";
                    playQuestion(stream);
                    ++index;
                })
            }
            audio.play();

        } else if(question.type=="video") {
            //video.source = question.source;
            video.style.display = "inline";
            console.log("playing video with souce --- " +question.source );
            video.src = question.source;
            video.onended = function() {
                video.style.display = "none";
                ++index;
                console.log("playing video ended--- " +question.source );
                playQuestion(stream);
            }
            video.play();

        } else if(question.type=="image") {

        } else if(question.type=="words") {

        }*/
    }




    function processInstruction(stream, item) {
        console.log("processInstruction starts with souce --- " + item.type+"."+item.item );

        var audioFileName = item.type+"."+(item.item==0 ? "mp3" : item.item+".mp3");
        var source = audioFolder + audioFileName;
        var audio = new Audio(source);
        audio.onended = function() {
            console.log("processInstruction ends --- " +source );
            instr.style.display="none";
            processItem(stream);
        }
        instr.style.display = "inline";
        audio.play();
    }

    function processTransition(stream, item) {
        var source = audioFolder + "../"+item.audio;
        var audio = new Audio(source);
        audio.onended = function() {
            processItem(stream);
        }
        audio.play();
    }

    function processAudioQuestion(stream, item) {
        console.log("processAudioQuestion starts with souce --- " + item.type+"."+item.item );

        var audioFileName = item.type+"."+item.item+".mp3";
        var source = audioFolder + audioFileName;
        var audio = new Audio(source);

        audio.onended = function() {

            analyser.style.display = "inline";
            gotStream(stream);
            responseStartTime = new Date();
            startRecording();
            startTimer(item.itimeout, item.mtimeout,
                function(){
                    nextButton.style.display="inline";
                    nextButton.onclick = function() {
                        stopTimer();
                        stopRecording();
                        nextButton.style.display = "none";
                        analyser.style.display = "none";
                        processItem(stream);
                    };
                },
                function() {
                    stopTimer();
                    stopRecording();
                    nextButton.style.display = "none";
                    analyser.style.display = "none";
                    processItem(stream);
                }
            );
        }
        audio.play();
    }

    function processNameTheFace(stream, item) {

    }

    function processTrackTap(stream, item) {
        var audio = new Audio(audioFolder+item.audio);
        trackTap.style.display = "inline";
        audio.onended = function() {
            GameStart();
            startTimer(0, item.mtimeout, null, function() {
                GameOver();
                trackTap.style.display = "none";
                processItem(stream);
            });

        }
        audio.play();
    }

    function processRetellStory(stream, item){
        var audioList = item.audio.split(':');
        var rsindex = 0;
        var audio = new Audio(audioFolder+audioList[rsindex]);
        audio.onended = function() {

            playAudioInRetellStory(audioList, rsindex+1, stream, item);

        };
        audio.play();
    }
    function playAudioInRetellStory(audioList, rsindex, stream, item){
        if(rsindex>=audioList.length) {
            processItem(stream);
            return;
        }
        var audio = new Audio(audioFolder+audioList[rsindex]);

        audio.onended = function() {
            if(rsindex==2) { //The third audio in retell story is "Now you tell the story")
                analyser.style.display = "inline";
                gotStream(stream);
                startRecording();
                startTimer(item.itimeout, item.mtimeout,
                    function () {
                        nextButton.style.display = "inline";
                        nextButton.onclick = function () {
                            stopTimer();
                            stopRecording();
                            nextButton.style.display = "none";
                            analyser.style.display = "none";
                            playAudioInRetellStory(audioList, rsindex + 1, stream, item);
                        };
                    },
                    function () {
                        stopTimer();
                        stopRecording();
                        nextButton.style.display = "none";
                        analyser.style.display = "none";
                        playAudioInRetellStory(audioList, rsindex + 1, stream, item);
                    }
                );
            } else {
                playAudioInRetellStory(audioList, rsindex+1, stream, item);
            }
        }
        audio.play();
    }

    function processDescribeSilentVideo(stream, item) {
        var audioList = item.audio.split(':');
        var vindex = 0;
        video.src = videoFolder + item.video;
        video.load();
        var audio = new Audio(audioFolder+audioList[vindex]);
        audio.onended = function() {
            var analyser = document.getElementById("analyser");
            analyser.style.display="inline";
            startRecording();
            video.onended = function() {
                analyser.style.display="none";
                stopRecording();
                playAudioInDescribeVideo(audioList, vindex+1, stream, item);
            }
            video.play();
        };
        audio.play();

    }

    function playAudioInDescribeVideo(audioList, vindex, stream, item){
        if(vindex>=audioList.length) {
            processItem(stream);
            return;
        }
        var audio = new Audio(audioFolder+audioList[vindex]);

        audio.onended = function() {

            analyser.style.display = "inline";
            gotStream(stream);
            startRecording();
            startTimer(item.itimeout, item.mtimeout,
                function(){
                    nextButton.style.display="inline";
                    nextButton.onclick = function() {
                        stopTimer();
                        stopRecording();
                        nextButton.style.display = "none";
                        analyser.style.display = "none";
                        playAudioInDescribeVideo(audioList, vindex+1, stream, item);
                    };
                },
                function() {
                    stopTimer();
                    stopRecording();
                    nextButton.style.display = "none";
                    analyser.style.display = "none";
                    playAudioInDescribeVideo(audioList, vindex+1, stream, item);
                }
            );
        }
        audio.play();
    }


    function processQuickLit(stream, item) {
        
    }
    
    function processVolumeChecker(stream, item) {
        var audioFileName = item.type+"."+item.item+".mp3";
        var source = audioFolder + audioFileName;
        var audio = new Audio(source);
        var instr = document.getElementById("instructionText");
        instr.innerHTML = "Hear This ?";
        var nextButton = document.getElementById("nextButton");
        nextButton.style.display="inline";
        nextButton.onclick = function() {
            instr.style.display="none";
            nextButton.style.display="none";
            audio.pause();audio.src="";
            processItem(stream);
        };
        audio.onended = function() {
            audio.play();
        }
        instr.style.display = "inline";
        audio.play();
    }
    
    function processMicrophoneChecker(stream, item) {
        var audio = new Audio('/assets/Audio/items/2000.2.mp3');
        audio.onended = function() {
            document.getElementById("analyser").style.display="inline";
            gotStream(stream);
            startRecording();
            startTimer(0, item.mTimeout, null, function() {
                stopRecording();
                document.getElementById("analyser").style.display = "none";
                switch(audioLevel) {
                    case audioLevelOptions.OK:
                        var audioOK = new Audio('/assets/Audio/items/2000.2.OK.mp3');
                        audioOK.onended = function () {
                            processItem(stream);
                        }
                        audioOK.play();
                        break;
                    case audioLevelOptions.LowVolume:
                        var audioLowVolume = new Audio('/assets/Audio/items/2000.2.Low.mp3');
                        audioLowVolume.onended = function () {
                            processItem(stream);
                        }
                        audioLowVolume.play();
                        break;
                    case audioLevelOptions.LowSNR:
                        var audioLowSNR = new Audio('/assets/Audio/items/2000.2.Noise.mp3');
                        audioLowSNR.onended = function () {
                            window.location.href = "/?error=Make sure you are in a quiet place.";
                        }
                        audioLowSNR.play();
                        break;
                    default:
                        var audioUnkonw = new Audio('/assets/Audio/items/2000.2.MoreSpeech.mp3');
                        audioUnkonw.onended = function () {
                            processMicrophoneChecker(stream, item); //repeat the item again.
                        }
                        audioUnkonw.play();
                        break;
                }

            })
            //toggleRecording(this);
        };
        audio.play();
    }

    function processStroop(stream, item) {}

    function processFindErrorResponse(stream, item) {}

    function processCalcuationResponse(stream, item){}

    function processInterpretResponse() {}

    $.get("/questionSet", function(data) {
        questionList = data;
        navigator.getUserMedia({audio: true, video: false}, function (stream) {
            processItem(stream);
        }, function (error) {
            audioOrVideoNotEnabled("Please make sure your microphone is enabled.");
        });
    })

</script>

</body>
</html>