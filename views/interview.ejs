<!DOCTYPE html>
<html lang="en">
<head>
    <title>Bootstrap Example</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/main.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>


</head>
<body>

<div class="container">

    <div id="top" class="row panel-body ">
        <div id="cameraDiv" class="col-lg-1">
            <span><video id="camera" autoplay></video></span>
        </div>

        <div id="spinner" class="col-lg-1 " >
            <span class="vcenter">  <% include partials/timer.ejs %></span>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-4">
            ...........
        </div>
        <div class="col-sm-4">
            ...
        </div>
        <div class="col-sm-4">
            ...
        </div>
    </div>
    <div id="videoContent" class="row text-center">
        <video id="video" width="50%" height="50%" autoplay></video>
    </div>
    <div id="viz" >
        <canvas id="analyser" width="1024" height="500" style="display: none"></canvas>
    </div>

    <div id="controls" style="display: none">
        <img id="record" src="images/mic128.png" onclick="toggleRecording(this);" style="display: none">
        <a id="save" href="#" style="display: none"><img src="images/save.svg"></a>
    </div>
    <div id="button" class="row text-center">
        <button id="nextButton" type="button" class="text-center btn-lg " font-size="16px">Next</button>
    </div>
</div>
<script>
    function audioOrVideoNotEnabled(text) {
        audioLevel = audioLevelOptions.NoMicrophone;
        var audio = new Audio('/assets/Audio/EnableInterviewAccess.mp3');
        audio.play();
        audio.onended = function() {
            window.location.href= '/?error='+text
        };
    }

    var video = document.getElementById('camera');
    //var canvas = document.querySelector('canvas');
    //var ctx = canvas.getContext('2d');
    //var image = document.querySelector('img');
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;

    window.URL = window.URL || window.webkitURL;
    if (navigator.getUserMedia) {
        navigator.getUserMedia({ video: true,audio:false},
            function(stream) {
                video.src = window.URL.createObjectURL(stream);
                video.onloadedmetadata = function(e) {
                    video.play();
                };
            },
            function(err) {
                audioOrVideoNotEnabled("The following error occured: " + err.name);
            }
        );
    } else {
        audioOrVideoNotEnabled("Your Browser doesn't support video");
    }
</script>

<script>
    var audioFolder = "assets/Audio/items/"
    var videoFolder = "assets/Video/"
    var imageFolder = "assets/Images/"
    var questionList = [{"type": "video","source": "assets/Video/HotdogSquare.mp4","timeout": 0,"id": "3"},{"type": "audio","source": "assets/Audio/items/2070.1.mp3","timeout": 10,"id": "1"},{"type": "audio","source": "assets/Audio/items/2070.3.mp3","timeout": 10,"id": "2"},{"type": "audio","source": "assets/Audio/items/2070.3.mp3","timeout": 10,"id": "4_1"},{"type": "audio","source": "assets/Audio/items/2070.3.mp3","timeout": 10,"id": "4_2"},{"type": "audio","source": "assets/Audio/items/2070.3.mp3", "timeout": 10,"id": "5"}];
    var index = -1;
    var analyser = document.getElementById("analyser");
    var video = document.getElementById("video");
    var item = questionList[index];
    var nextButton = document.getElementById("nextButton");
    var instr = document.getElementById("instructionText");
    var trackTap = document.getElementById("trackTap");

    function processItem(stream) {
        ++index;
        if(index>=questionList.length) return;
        item = questionList[index];
        switch (item.type) {
            case 2000:
                if(item.item == 1) {
                    processVolumeChecker(stream, item);
                } else if(item.item == 2) {
                    processMicrophoneChecker(stream, item);
                } else {
                    processInstruction(stream, item);
                }
                break;
            case 2023:
                processDescribeSilentVideo(stream, item)
                break;
            case 2001:
            case 2040:
            case 2041:
            case 2044:
            case 2065:
            case 2066:
            case 2067:
            case 2068:
            case 2069:
            case 2070:
            case 2071:
            case 2072:
            case 2073:
            case 2074:
            case 2100:
                processAudioQuestion(stream, item);
                break;
            case 2032:
                processTrackTap(stream, item);
                break;
            case 2050:
                //This type doesn't exist yet
                processStroop(stream, item);
                break;
            case 2080:
                //This type doesn't exist yet
                processInterpretResponse(stream, item);
                break;
            case 2081:
                //This type doesn't exist yet
                processFindErrorResponse(stream, item);
                break;
            case 2082:
                //This type doesn't exist yet
                processCalcuationResponse(stream, item);
                break;
            case 2062: //bypass the following two for now
                //processNameTheFace(stream, item);
                processItem(stream);
                break;
            case 2064:
                //processQuickLit(stream, item);
                processItem(stream);
                break;
            default:
                processTransition(stream, item);
                break;
        }
        /*
        if(question.type=="audio") {
            var audio = new Audio(question.source);
            console.log("playing audio with souce --- " +question.source );

            audio.onended = function() {
                console.log("playing audio ended--- " +question.source );

                canvas.style.display = "inline";
                gotStream(stream);
                toggleRecording(recordButton);
                startTimer(question.timeout, 50, function() {
                    toggleRecording(recordButton);
                    canvas.style.display="none";
                    playQuestion(stream);
                    ++index;
                })
            }
            audio.play();

        } else if(question.type=="video") {
            //video.source = question.source;
            video.style.display = "inline";
            console.log("playing video with souce --- " +question.source );
            video.src = question.source;
            video.onended = function() {
                video.style.display = "none";
                ++index;
                console.log("playing video ended--- " +question.source );
                playQuestion(stream);
            }
            video.play();

        } else if(question.type=="image") {

        } else if(question.type=="words") {

        }*/
    }

    navigator.getUserMedia({audio: true, video: false}, function (stream) {
        processItem(stream);
    }, function (error) {
        audioOrVideoNotEnabled("Please make sure your microphone is enabled.");
    });


    function processInstruction(stream, item) {
        var audioFileName = item.type+"."+item.item+".mp3";
        var source = audioFolder + audioFileName;
        var audio = new Audio(source);
        console.log("processInstruction starts with souce --- " + source );
        audio.onended = function() {
            console.log("processInstruction ends --- " +source );
            instr.style.display="none";
            processItem(stream);
        }
        instr.style.display = "inline";
        audio.play();
    }

    function processTransition(stream, item) {
        var source = audioFolder + "../"+item.audio;
        var audio = new Audio(source);
        audio.onended = function() {
            processItem(stream);
        }
        audio.play();
    }

    function processAudioQuestion(stream, item) {
        var audioFileName = item.type+"."+item.item+".mp3";
        var source = audioFolder + audioFileName;
        var audio = new Audio(source);

        audio.onended = function() {

            analyser.style.display = "inline";
            gotStream(stream);
            startRecording();
            startTimer(item.itimeout, item.mtimeout,
                function(){
                    nextButton.style.display="inline";
                    nextButton.onclick = function() {
                        stopTimer();
                        stopRecording();
                        nextButton.style.display = "none";
                        analyser.style.display = "none";
                        processItem(stream);
                    };
                },
                function() {
                    stopTimer();
                    stopRecording();
                    nextButton.style.display = "none";
                    analyser.style.display = "none";
                    processItem(stream);
                }
            );
        }
        audio.play();
    }

    function processNameTheFace(stream, item) {

    }

    function processTrackTap(stream, item) {

    }

    function processDescribeSilentVideo(stream, item) {
        var audioList = item.audio.split(',');
        var vindex = 0;
        video.src = videoFolder + item.video;
        video.load();
        var audio = new Audio(audioList[vindex]);
        audio.onended = function() {
            var analyser = document.getElementById("analyser");
            analyser.style.display="inline";
            startRecording();
            video.onended = function() {
                analyser.style.display="none";
                stopRecording();
                playAudioInDescribeVideo(audioList, vindex+1, stream, item);
            }
            video.play();
        };
        audio.play();

    }

    function playAudioInDescribeVideo(audioList, vindex, stream, item){
        if(vindex>=audioList.length) {
            processItem(stream);
            return;
        }
        var audio = new Audio(audioList[vindex]);

        audio.onended = function() {

            analyser.style.display = "inline";
            gotStream(stream);
            startRecording();
            startTimer(item.itimeout, item.mtimeout,
                function(){
                    nextButton.style.display="inline";
                    nextButton.onclick = function() {
                        stopTimer();
                        stopRecording();
                        nextButton.style.display = "none";
                        analyser.style.display = "none";
                        playAudioInDescribeVideo(audioList, vindex+1, stream, item);
                    };
                },
                function() {
                    stopTimer();
                    stopRecording();
                    nextButton.style.display = "none";
                    analyser.style.display = "none";
                    playAudioInDescribeVideo(audioList, vindex+1, stream, item);
                }
            );
        }
        audio.play();
    }


    function processQuickLit(stream, item) {
        
    }
    
    function processVolumeChecker(stream, item) {
        var audioFileName = item.type+"."+item.item+".mp3";
        var source = audioFolder + audioFileName;
        var audio = new Audio(source);
        var instr = document.getElementById("instructionText");
        instr.innerHTML = "Hear This ?";
        var nextButton = document.getElementById("nextButton");
        nextButton.style.display="inline";
        nextButton.onclick = function() {
            instr.style.display="none";
            nextButton.style.display="none";
            audio.pause();audio.src="";
            processItem(stream);
        };
        audio.onended = function() {
            audio.play();
        }
        instr.style.display = "inline";
        audio.play();
    }
    
    function processMicrophoneChecker(stream, item) {
        var audio = new Audio('/assets/Audio/items/2000.2.mp3');
        audio.onended = function() {
            document.getElementById("analyser").style.display="inline";
            gotStream(stream);
            startRecording();
            startTimer(0, item.mTimeout, null, function() {
                stopRecording();
                document.getElementById("analyser").style.display = "none";
                switch(audioLevel) {
                    case audioLevelOptions.OK:
                        var audioOK = new Audio('/assets/Audio/items/2000.2.OK.mp3');
                        audioOK.onended = function () {
                            procesItem(stream);
                        }
                        audioOK.play();
                        break;
                    case audioLevelOptions.LowVolume:
                        var audioLowVolume = new Audio('/assets/Audio/items/2000.2.Low.mp3');
                        audioLowVolume.onended = function () {
                            procesItem(stream);
                        }
                        audioLowVolume.play();
                        break;
                    case audioLevelOptions.LowSNR:
                        var audioLowSNR = new Audio('/assets/Audio/items/2000.2.Noise.mp3');
                        audioLowSNR.onended = function () {
                            window.location.href = "/?error=Make sure you are in a quiet place.";
                        }
                        audioLowSNR.play();
                        break;
                    default:
                        var audioUnkonw = new Audio('/assets/Audio/items/2000.2.MoreSpeech.mp3');
                        audioUnkonw.onended = function () {
                            processMicrophoneChecker(stream, item); //repeat the item again.
                        }
                        audioUnkonw.play();
                        break;
                }

            })
            //toggleRecording(this);
        };
        audio.play();
    }

    function processStroop(stream, item) {}

    function processFindErrorResponse(stream, item) {}

    function processCalcuationResponse(stream, item){}

    function processInterpretResponse() {}

</script>

</body>
</html>