<!DOCTYPE html>
<html lang="en">
<head>
    <title>Bootstrap Example</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="/bootstrap/dist/css/bootstrap.css">
    <link rel="stylesheet" href="/css/main.css">
    <script src="/jquery/dist/jquery.min.js"></script>
    <script src="/bootstrap/dist/js/bootstrap.min.js"></script>
    <script src="/jsnlog.js/jsnlog.js"></script>
    <script src="js/tracktap.js"></script>
    <script src="js/recorderjs/audiodisplay.js"></script>
    <script src="js/recorderjs/recorder.js"></script>
    <script src="js/recorderjs/audioMain.js"></script>
    <link rel="stylesheet" href="/css/audioCss.css">
    <link rel="stylesheet" href="/css/trackTap.css">
    <style>
        .col-centered{
            float: none;
            margin: 0 auto;
        }
        .clearfix:after {
            content: "";
            display: table;
            clear: both;
        }
        .responsive {
            padding: 0 6px;
            float:left;
            width: 49.99999%;
        }

        #analyser {
            display: inline-block;
            background: #000000;
            width:100%;
            min-height: 15px;
            max-height:50px;
            box-shadow: 0px 0px 10px #000000;
        }

    </style>
</head>
<body>

<div class="container">

    <div id="top" class="row panel-body ">
        <div id="camera_div" class="col-lg-2">
            <span><video id="camera" autoplay width="100%" height="100%"></video></span>
        </div>
        <div id="timer_div" class="col-lg-offset-7 col-lg-1">
            <% include partials/timer.ejs %>
        </div>
    </div>

    <div style="display: none"><audio id="audioGlobal" src="http://192.168.1.4/assets/Audio/items/2000.1.mp3"></audio></div>

    <div>
        <div id="videoContent" class="text-center row" style="display: none; width:'60%'; height:'60%'">
            <video id="video"></video>
        </div>
        <div id="nameFacesContent" class="text-center row" style="color : white; display: none;">
                <div id="4faces" class="text-center row col-lg-6 col-lg-offset-3" >
                    <div class="row">
                        <div class="img col-lg-3">
                            <img id="face0"  width="100%" height="100%" >
                            <div style="color:white;text-align: center" id="name0"></div>
                        </div>
                        <div class="img col-lg-3">
                            <img id="face1" width="100%" height="100%"  >
                            <div style="color:white;text-align: center" id="name1"></div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="img col-lg-3">
                            <img id="face2"  width="100%" height="100%" >
                            <div style="color:white;text-align: center" id="name2"></div>
                        </div>
                        <div class="img col-lg-3">
                            <img id="face3" width="100%" height="100%" >
                            <div style="color:white;text-align: center" id="name3"></div>

                        </div>
                    </div>
                </div>
                <div id="testFaceDiv" class="text-center row col-lg-6 col-lg-offset-3" style="display: none;">
                    <div class="img col-lg-6">
                        <img id="testFace" width="70%" height="70%"  >
                    </div>
                </div>
        </div>
        <div id="trackTap" style="display: none"  class="text-center row ">
            <table class="col-lg-6 col-lg-offset-2">
                <tr class="row"  >
                    <td id="td[0]" class="col-lg-3" onclick="hit(0)"></td>
                    <td id="td[1]" class="col-lg-3" onclick="hit(1)"></td>
                </tr>
                <tr  class="row"  >
                    <td id="td[2]" class="col-lg-3" onclick="hit(2)"></td>
                    <td id="td[3]" class="col-lg-3" onclick="hit(3)"></td>
                </tr>
                <tr  class="row" >
                    <td id="td[4]" class="col-lg-3" onclick="hit(4)"></td>
                    <td id="td[5]" class="col-lg-3" onclick="hit(5)"></td>
                </tr>
            </table>
        </div>
        <div  id="textContent" class ="row text-center" style=" padding-top:20%; display: none;width:100%; height:100% ;color: white; font: Arial; font-size: 30px; font-weight: bold;"  >
            <!-- Volume checker-->
                Hear This ?
        </div>
        <div id="textShowAll" >
            <div  class="row" style="color:green">
                <div id="word0" style="width:50%; text-align: center;" onclick=toggleHighlight(this)><b></b></div>
            </div>
            <div  class="row" style="  color:green">
                <div  id="word1" style="width:50%;float: right;text-align: center" onclick=toggleHighlight(this)><b></b></div>
            </div>
            <div  class="row" style="color:green">
                <div  id="word2" style="width:50%; text-align: center" onclick=toggleHighlight(this)><b></b></div>
            </div>
            <div  class="row" style="  color:green">
                <div  id="word3" style="width:50%;float: right;text-align: center" onclick=toggleHighlight(this)><b></b></div>
            </div>
            <div  class="row" style="  color:green">
                <div  id="word4" style="width:50%;text-align: center" onclick=toggleHighlight(this)><b></b></div>
            </div>
            <div  class="row" style="  color:green">
                <div  id="word5" style="width:50%;float: right;text-align: center" onclick=toggleHighlight(this)><b></b></div>
            </div>
        </div>
    </div>

    <div id="bottom">
        <div id="microphone"  class="row" >
            <canvas id="analyser"  ></canvas>
        </div>
        <div  id="footer" class="row" >
            <button id="nextButton" class="btn-primary btn-lg"style="height:100%;">Click Here To Start</button>
        </div>
    </div>




</div>

<script>
    function audioOrVideoNotEnabled(text) {
        audioLevel = audioLevelOptions.NoMicrophone;
        var audio = new Audio('/assets/Audio/EnableInterviewAccess.mp3');
        audio.play();
        audio.onended = function() {
            window.location.href= '/?error='+text
        };
    }

    var camera = document.getElementById('camera');
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
    window.URL = window.URL || window.webkitURL;
    if (navigator.getUserMedia) {
        navigator.getUserMedia({ video: true,audio:false},
            function(stream) {
                camera.src = window.URL.createObjectURL(stream);
                camera.onloadedmetadata = function(e) {
                    camera.play();
                };
            },
            function(err) {
                audioOrVideoNotEnabled("The following error occured: " + err.name);
            }
        );
    } else {
        audioOrVideoNotEnabled("Your Browser doesn't support video");
    }
</script>

<script>
    var websiteUrl = "https://54.187.148.253:3000";
    var audioFolder = websiteUrl + "/assets/Audio/items/"
    var videoFolder = websiteUrl + "/assets/Video/"
    var imageFolder = "assets/Images/"
    var nameFacesImageFolder = "assets/Images/2062/"
    
    var takePictureIntervalInMilliSeconds = 120000;
    var takePictureIntervalId = null;

    var analyser = document.getElementById("analyser");
    var video = document.getElementById("video");
    var camera = document.getElementById("camera");
    var videoContent = document.getElementById("videoContent");
    var nextButton = document.getElementById("nextButton");
    var instr = document.getElementById("textContent");
    var trackTap = document.getElementById("trackTap");
    var nameFacesContent = document.getElementById("nameFacesContent");

    var selectedWords = new Set();
    var questionList;

    var item,itemStatus;
    var itemResponse = {}, itemSubResponse = {};
    var responseStartTime, responseEndTime, subResponseStartTime, subResponseEndTime, subResponseStart,subResponseDuration;
    var index = -1;
    var pictureId = 0;
    var picItemResponse = {};
    var interviewStartTime, interviewEndTime;
    var audioGlobal = document.getElementById('audioGlobal');
    JL("client").info("Interview started");

    function takePictureAndUpload() {


        JL("client").info("Taking picture for the interviewer with pictureId: " + (++pictureId));
        var picture = {};
        picture.takenItem = item.item;
        picture.takenType = item.type;
        picture.takenTime = (new Date()).toUTCString();
        picture.pngFileName = 'camera'+pictureId+'.png';
        picture.elapsedTime = (new Date() - interviewStartTime)/1000;
        //TODO: upload picture to S3
        $.post('/api/session/cameraPictureSessionData', {pictureInfo: picture}, function(data) {
            if (data != "ok") {
                var errorMessage = "Upload cameraPicture failed with message: " + data;
                console.error(errorMessage);
                JL("client").error(errorMessage);
            } else {
                JL("client").error("Upload CameraPicture succeeded.");
            }
        });
    }

    function postItemResponse(stream) {
        $.post("/api/session/updateSessionState", {itemResponse : itemResponse}, function(data) {
            if(data!="ok") {
                var errorMessage = "Upload response for testItem type:"+item.type+", item:"+item.item + " failed with message: " + data;
                console.error(errorMessage);
                JL("client").error(errorMessage);
            } else {
                JL("client").error("Upload response for testItem type:"+item.type+", item:"+item.item + " succeeded.");
                //processItem(stream);
            }
        })
        processItem(stream);
    }

    function postPictureResponseAndMarkEnd() {
        picItemResponse.endTime = (new Date()).toUTCString();
        picItemResponse.status = "MAX_TIMEOUT";
        //TODO mark end and redirect to thank you page
        /*$.post("/api/session/updateSessionState", {itemResponse : picItemResponse}, function(data) {
            if(data!="ok") {
                var errorMessage = "Upload picture response for testItem type:"+item.type+", item:"+item.item + " failed with message: " + data;
                console.error(errorMessage);
                JL("client").error(errorMessage);
            } else {
                JL("client").error("Upload picture response for testItem type:"+item.type+", item:"+item.item + " succeeded.");
                //end the interview
            }
        })*/
    }

    function initializeItemProcessingVariables() {
        itemResponse = {};
        itemResponse.subResponses = [];
        itemSubResponse = {};
        nextButton.style.display = 'none';
        nextButton.onclick=function(){}
    }
    function processItem(stream) {
        ++index;
        if(index>=questionList.length) {
            clearInterval(takePictureIntervalId);
            interviewEndTime = new Date();
            postPictureResponseAndMarkEnd();
            return;
        }
        item = questionList[index];
        initializeItemProcessingVariables();
        itemResponse.item = item;
        switch (item.type) {
            case 2000:
                if(item.item == 1) {
                    processVolumeChecker(stream, item);
                } else if(item.item == 2) {
                    processMicrophoneChecker(stream, item);
                } else if(item.item==3){
                    picItemResponse.item = item;
                    picItemResponse.pictures=[];
                    picItemResponse.startTime = (new Date()).toUTCString();
                    picItemResponse.afilename = "";
                    takePictureIntervalInMilliSeconds = item.mtimeout*1000;
                    interviewStartTime = new Date();
                    takePictureAndUpload();
                    takePictureIntervalId = setInterval(takePictureAndUpload, takePictureIntervalInMilliSeconds);
                    processInstruction(stream, item);
                }
                break;
            case 2023:
                processDescribeSilentVideo(stream, item)
                break;
            case 2001:
            case 2041:
            case 2044:
            case 2065:
            case 2066:
            case 2067:
            case 2068:
            case 2069:
            case 2070:
            case 2071:
            case 2072:
            case 2073:
            case 2074:
            case 2091:
            case 2094:
            case 2095:
            case 2096:
            case 2098:
            case 2100:
                if(item.item==0) processInstruction(stream, item); //item 0 has no recording
                else processAudioQuestion(stream, item);
                break;
            case 2032:
                processTrackTap(stream, item);
                //processItem(stream);
                break;
            case 2040:
                processRetellStory(stream, item);
                break;
            case 2062: //bypass the following two for now
                if(item.item==0) {
                    processInstruction(stream, item);
                } //item 0 has no recording
                else {
                    processNameTheFace(stream, item);
                }
                break;
            case 2064:
                processQuickLit(stream, item);
                //processItem(stream);
                break;
            default:
                JL('client').info("Skipping not defined item: " + item.type+"."+item.item);
                processItem(stream);
                break;
        }
    }




    function processInstruction(stream, item) {
        console.log("processInstruction starts with souce --- " + item.type+"."+item.item );
        nextButton.style.display = 'none';
        var audioFileName = item.type+"."+(item.item==0 ? "mp3" : item.item+".mp3");
        audioGlobal.src = audioFolder + audioFileName;
        audioGlobal.onended = function() {
            console.log("processInstruction ends --- " +audioFileName );
            instr.style.display="none";
            processItem(stream);
        }

        //instr.style.display = "inline";
        audioGlobal.play();
    }

    function processTransition(stream, item) {
        nextButton.style.display = 'none';
        var source = audioFolder+item.audio; //TODO: not used
        audioGlobal.src = source;
        audioGlobal.onended = function() {
            processItem(stream);
        }
        audioGlobal.play();
    }

    function processNextAudioInAudioQuestions(audioList, aindex, stream, item) {
        if(aindex>=audioList.length) {
            //End of the item, process next item
            responseEndTime=new Date();
            itemResponse.startTime = responseStartTime.toUTCString();
            itemResponse.endTime = responseEndTime.toUTCString();
            if(aindex>1) {
                itemResponse.subresponses.push(itemSubResponse);
            }
            postItemResponse(stream);
            return;
        }
        itemResponse.subresponses.push(itemSubResponse);


        audioGlobal.src = audioFolder+audioList[aindex];
        itemSubResponse = {};
        audioGlobal.onended = function() {
            analyser.style.display = "inline";
            gotStream(stream);
            startRecording();
            subResponseStartTime = new Date();
            itemSubResponse.startTime = subResponseStartTime.toUTCString();
            itemSubResponse.extraInfo='the No. '+(aindex+1) +' recording';
            itemSubResponse.audioFileName = item.type+"."+item.item+"."+(aindex+1)+".flac";
            itemSubResponse.start=subResponseStart+subResponseDuration; //start equals last subresponse end;
            subResponseStart = itemSubResponse.start;

            startTimer(item.itimeout, item.mtimeout,
                function () {
                    nextButton.style.display = "inline";
                    nextButton.onclick = function () {
                        stopTimer();
                        stopRecording();
                        subResponseEndTime = new Date();
                        itemResponse.status = "NEXT_TOUCHED";
                        itemSubResponse.status = "NEXT_TOUCHED";
                        itemSubResponse.endTime = subResponseEndTime.toUTCString();
                        subResponseDuration = (subResponseEndTime - subResponseStartTime)/1000;
                        itemSubResponse.duration = subResponseDuration;
                        nextButton.style.display = "none";
                        analyser.style.display = "none";
                        processNextAudioInAudioQuestions(audioList, aindex + 1, stream, item);
                    };
                },
                function () {
                    stopTimer();
                    stopRecording();
                    subResponseEndTime = new Date();
                    itemResponse.status = "MAX_TIMEOUT";
                    itemSubResponse.status = "MAX_TIMEOUT";
                    itemSubResponse.endTime = subResponseEndTime.toUTCString();
                    subResponseDuration = (subResponseEndTime - subResponseStartTime)/1000;
                    itemSubResponse.duration = subResponseDuration;
                    nextButton.style.display = "none";
                    analyser.style.display = "none";
                    processNextAudioInAudioQuestions(audioList, aindex + 1, stream, item);
                }
            );

        }
        audioGlobal.play();
    }

    function processAudioQuestion(stream, item) {
        console.log("processAudioQuestion starts with souce --- " + item.audio );
        var audioFileList = item.audio.split(':');
        var aindex = 0;
        var audioFileName = audioFileList[aindex];
        JL('client').info("start playing audio " + audioFileName);
        audioGlobal.src = audioFolder + audioFileName;

        itemResponse.afilename = item.type+"."+item.item+".flac";
        itemResponse.itemType = audioFileList.length >1 ? "SubAudioResponse" : "AudioResponse";
        itemResponse.item = item;
        itemResponse.subresponses=[];
        audioGlobal.onended = function() {
            JL('client').info("end playing audio " + audioFileName);

            analyser.style.display = "inline";
            gotStream(stream);
            responseStartTime = subResponseStartTime = new Date();
            startRecording();
            itemSubResponse.startTime = subResponseStartTime.toUTCString();
            itemSubResponse.extraInfo='the No. '+(aindex+1) +' recording';
            itemSubResponse.audioFileName = item.type+"."+item.item+"."+(aindex+1)+".flac";
            subResponseStart = itemSubResponse.start= 0;


            startTimer(item.itimeout, item.mtimeout,
                function(){
                    nextButton.style.display="inline";
                    nextButton.onclick = function() {
                        JL('client').info("Next Button clicked in No."+(aindex+1)+" question of " + item.type+"."+item.item);
                        stopTimer();
                        stopRecording();
                        nextButton.style.display = "none";
                        analyser.style.display = "none";

                        subResponseEndTime = new Date();
                        itemResponse.status = "NEXT_TOUCHED";
                        itemSubResponse.status = "NEXT_TOUCHED";
                        itemSubResponse.endTime = subResponseEndTime.toUTCString();
                        subResponseDuration = (subResponseEndTime - subResponseStartTime)/1000;
                        itemSubResponse.duration = subResponseDuration;
                        processNextAudioInAudioQuestions(audioFileList, aindex+1, stream, item);
                    };
                },
                function() {
                    stopTimer();
                    stopRecording();
                    JL('client').info("Max timeout reached in No."+(aindex+1)+" question of " + item.type+"."+item.item);

                    nextButton.style.display = "none";
                    analyser.style.display = "none";
                    subResponseEndTime = new Date();
                    itemResponse.status = "MAX_TIMEOUT";
                    itemSubResponse.status = "MAX_TIMEOUT";
                    itemSubResponse.endTime = subResponseEndTime.toUTCString();
                    subResponseDuration = (subResponseEndTime - subResponseStartTime)/1000;
                    itemSubResponse.duration = subResponseDuration;
                    processNextAudioInAudioQuestions(audioFileList, aindex+1, stream, item);
                }
            );
        }
        audioGlobal.play();
    }

    function processNameTheFace(stream, item) {
        var audioList = item.audio.split(':');
        var nfindex = 0;
        var sex = item.item==1 ? 'F' : 'M';
        var audio = new Audio(audioFolder+audioList[nfindex]);
        audio.play(); // Look at these people, need to give people time to remember
        var facePictureFiles  = item.namefacePicBlob;
        var names = item.namefaceNameBlob;
        var fourFacesDiv = document.getElementById("4faces");
        var testFaceDiv = document.getElementById("testFaceDiv");
        var testFace = document.getElementById("testFace");
        nextButton.style.display = "none";
        nameFacesContent.style.display = "inline";
        for(var p in facePictureFiles) {
            var fileN = facePictureFiles[p];
            document.getElementById("face"+p).src = nameFacesImageFolder + fileN;
            document.getElementById("name"+p).innerHTML = names[p].name;
        }
        fourFacesDiv.style.display = "inline";
        testFaceDiv.style.display = "none"
        startTimer(0, item.mtimeout, null, function() {
            stopTimer();
            var selectedName = item.namefaceNamePicked.name;
            var selectedInex = names.indexOf(selectedName);
            // Show the selected name/photo ,and play audio "who is this"
            var audio2 = new Audio(audioFolder+audioList[1]);
            testFace.src = nameFacesImageFolder+item.namefacePicPicked.filename
            testFaceDiv.style.display = "inline";
            fourFacesDiv.style.display = "none";
            audio2.play(); // Look at the people, who is he, need to give people time to remember
            audio2.onended = function() {
                analyser.style.display = "inline";
                gotStream(stream);
                startRecording();
                startTimer(0, item.mtimeout,
                    null,
                    function () {
                        stopTimer();
                        stopRecording();
                        var audio3 = new Audio(audioFolder+item.type+"."+sex+".mp3");
                        audio3.play();
                        audio3.onended = function() {
                            gotStream(stream);
                            startRecording();
                            startTimer(item.itimeout, item.mtimeout,
                                function(){
                                    nextButton.style.display = "inline";
                                    nextButton.onclick = function () {
                                        stopTimer();
                                        stopRecording();
                                        nameFacesContent.style.display="none";
                                        nextButton.style.display = "none";
                                        analyser.style.display = "none";
                                        postItemResponse(stream);
                                    };
                                },
                                function() {
                                    stopTimer();
                                    stopRecording();
                                    nameFacesContent.style.display="none";
                                    nextButton.style.display = "none";
                                    analyser.style.display = "none";
                                    postItemResponse(stream);
                                }
                            );
                        }
                    }
                );
            }

        });
    }

    function processTrackTap(stream, item) {
        console.log("processTrackTap starts with souce --- " + item.type+"."+item.item );
        var audio = new Audio(audioFolder+item.audio);
        JL('client').info("start playing audio " + item.audio);
        analyser.style.display = 'none';
        nextButton.style.display = 'none';
        trackTap.style.display = "inline";
        audio.onended = function() {
            JL('client').info("start playing tracktap");
            responseStartTime = new Date();
            itemResponse.taps=[];
            GameStart();
            startTimer(0, item.mtimeout, null, function() {
                GameOver();
                trackTap.style.display = "none";
                responseEndTime = new Date();
                itemResponse.startTime = responseStartTime.toUTCString();
                itemResponse.endTime = responseEndTime.toUTCString();
                itemResponse.status = "MAX_TIMEOUT";
                itemResponse.score = score;
                //itemResponse.scoreInfo = scoreInfo;
                postItemResponse(stream);
                //processItem(stream);
            });

        }
        audio.play();
    }

    function processRetellStory(stream, item){
        var audioList = item.audio.split(':');
        var rsindex = 0;
        var audio = new Audio(audioFolder+audioList[rsindex]);
        audio.onended = function() {

            playAudioInRetellStory(audioList, rsindex+1, stream, item);

        };
        audio.play();
    }
    function playAudioInRetellStory(audioList, rsindex, stream, item){
        if(rsindex>=audioList.length) {
            processItem(stream);
            return;
        }
        var audio = new Audio(audioFolder+audioList[rsindex]);

        audio.onended = function() {
            if(rsindex==2) { //The third audio in retell story is "Now you tell the story")
                analyser.style.display = "inline";
                gotStream(stream);
                startRecording();
                startTimer(item.itimeout, item.mtimeout,
                    function () {
                        nextButton.style.display = "inline";
                        nextButton.onclick = function () {
                            stopTimer();
                            stopRecording();
                            nextButton.style.display = "none";
                            analyser.style.display = "none";
                            playAudioInRetellStory(audioList, rsindex + 1, stream, item);
                        };
                    },
                    function () {
                        stopTimer();
                        stopRecording();
                        nextButton.style.display = "none";
                        analyser.style.display = "none";
                        playAudioInRetellStory(audioList, rsindex + 1, stream, item);
                    }
                );
            } else {
                playAudioInRetellStory(audioList, rsindex+1, stream, item);
            }
        }
        audio.play();
    }

    function processDescribeSilentVideo(stream, item) {
        var audioList = item.audio.split(':');
        var vindex = 0;
        videoContent.style.display="inline";
        video.src = videoFolder + item.video;
        video.load();
        var audio = new Audio(audioFolder+audioList[vindex]);
        audio.onended = function() {
            analyser.style.display="inline";
            startRecording();
            video.onended = function() {
                analyser.style.display="none";
                stopRecording();
                playAudioInDescribeVideo(audioList, vindex+1, stream, item);
            }
            video.play();
        };
        audio.play();

    }

    function playAudioInDescribeVideo(audioList, vindex, stream, item){
        if(vindex>=audioList.length) {
            videoContent.style.display="none";

            processItem(stream);
            return;
        }
        var audio = new Audio(audioFolder+audioList[vindex]);

        audio.onended = function() {

            analyser.style.display = "inline";
            gotStream(stream);
            startRecording();
            startTimer(item.itimeout, item.mtimeout,
                function(){
                    nextButton.style.display="inline";
                    nextButton.onclick = function() {
                        stopTimer();
                        stopRecording();
                        nextButton.style.display = "none";
                        analyser.style.display = "none";
                        playAudioInDescribeVideo(audioList, vindex+1, stream, item);
                    };
                },
                function() {
                    stopTimer();
                    stopRecording();
                    nextButton.style.display = "none";
                    analyser.style.display = "none";
                    playAudioInDescribeVideo(audioList, vindex+1, stream, item);
                }
            );
        }
        audio.play();
    }

    var toggleHighlight = function(div) {
        if(div.classList.contains('highlight')) {
            div.classList.remove('highlight');
            selectedWords.delete(div.id);
        } else {
            div.classList.add('highlight');
            selectedWords.add(div.id);
        }
    }

    function processQuickLit(stream, item) {
        var audioList = item.audio.split(':'); // length==2
        var wordsBlob = item.wordsBlob;
        var numWords = wordsBlob.length;
        var audio0 = new Audio(audioFolder+audioList[0]);
        audio0.play();
        audio0.onended = function() {
            //show the word one by one
            var showWord = function() {
                if(numWords!=wordsBlob.length) stopTimer();

                --numWords;
                console.log("numWords: "+numWords);

                if(numWords<0) {
                    instr.style.display = "none";
                    //TODO: hide word, start tap real word;
                    var textShowAll =document.getElementById("textShowAll");
                    textShowAll.style.display="inline";
                    for(var i =0; i <wordsBlob.length; i++ ){
                       var word_slot =  document.getElementById("word" + i);
                        word_slot.innerHTML= wordsBlob[i].string;
                    }
                    stopTimer();
                    stopRecording();
                    var audio1 = new Audio(audioFolder+audioList[1]);
                    audio1.play();
                    nextButton.style.display = "inline";
                    nextButton.onclick = function() {
                        nextButton.style.display = "none";
                        for(var wordDiv of selectedWords) {
                            document.getElementById(wordDiv).classList.remove('highlight');
                        }
                        var textShowAll =document.getElementById("textShowAll");
                        textShowAll.style.display="none";

                        selectedWords = new Set();

                        postItemResponse(stream);
                    }
                } else {
                    instr.innerHTML=wordsBlob[wordsBlob.length-numWords-1].string;
                    instr.style.display = "inline";
                    startTimer(0, item.mtimeout, null, showWord);
                }
            }
            showWord();
            startRecording();
            //startTimer(0, item.mtimeout, null, showWord);
        }

    }
    
    function processVolumeChecker(stream, item) {
        var audioFileName = item.type+"."+item.item+".mp3";

        var source = audioFolder + audioFileName;
        audioGlobal.src = source;
        instr.innerHTML = "Hear This ?";
        var nextButton = document.getElementById("nextButton");
        nextButton.innerHTML="Next";

        audioGlobal.onended = function() {
            audioGlobal.play();
            nextButton.style.display = "inline";
            nextButton.onclick = function() {
                instr.style.display="none";
                nextButton.style.display="none";
                audioGlobal.pause();
                audioGlobal.src="";
                processItem(stream);
            };
        }
        instr.style.display = "inline";
        audioGlobal.play();
    }
    
    function processMicrophoneChecker(stream, item) {
        var audio = new Audio('/assets/Audio/items/2000.2.mp3');
        JL('client').info("Start microphone checker. Playing audio 2000.2.mp3.");
        instr.innerHTML="Name and Location";
        instr.style.display = "inline";
        audio.onended = function() {
            document.getElementById("analyser").style.display="inline";
            JL('client').info("Start recording for microphone checker. Playing audio 2000.2.mp3.");
            gotStream(stream);
            startRecording();
            startTimer(0, item.mTimeout, null, function() {
                stopRecording();
                instr.style.display = "none";
                document.getElementById("analyser").style.display = "none";
                switch(audioLevel) {
                    case audioLevelOptions.OK:
                        var audioOK = new Audio('/assets/Audio/items/2000.2.OK.mp3');
                        audioOK.onended = function () {
                            processItem(stream);
                        }
                        audioOK.play();
                        break;
                    case audioLevelOptions.LowVolume:
                        var audioLowVolume = new Audio('/assets/Audio/items/2000.2.Low.mp3');
                        audioLowVolume.onended = function () {
                            processItem(stream);
                        }
                        audioLowVolume.play();
                        break;
                    case audioLevelOptions.LowSNR:
                        var audioLowSNR = new Audio('/assets/Audio/items/2000.2.Noise.mp3');
                        audioLowSNR.onended = function () {
                            window.location.href = "/?error=Make sure you are in a quiet place.";
                        }
                        audioLowSNR.play();
                        break;
                    default:
                        var audioUnkonw = new Audio('/assets/Audio/items/2000.2.MoreSpeech.mp3');
                        audioUnkonw.onended = function () {
                            processMicrophoneChecker(stream, item); //repeat the item again.
                        }
                        audioUnkonw.play();
                        break;
                }

            })
            //toggleRecording(this);
        };
        audio.play();
    }

    $.get("/questionSet", function(data) {
        questionList = data;
        navigator.getUserMedia({audio: true, video: false}, function (stream) {
            nextButton.onclick = function () {
                processItem(stream);
            }
        }, function (error) {
            audioOrVideoNotEnabled("Please make sure your microphone is enabled.");
        });


    })

</script>

</body>
</html>