<!DOCTYPE html>
<html lang="en">
<head>
    <title>AMI PACES</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <link rel="stylesheet" href="/bootstrap/dist/css/bootstrap.css">
    <link rel="stylesheet" href="/css/main.css">
    <script src="/jquery/dist/jquery.min.js"></script>
    <script src="/bootstrap/dist/js/bootstrap.min.js"></script>
    <script src="/underscore/underscore.js"></script>
    <script src="/jsnlog.js/jsnlog.js"></script>
    <script src="/webcamjs/webcam.js"></script>
    <script src="js/tracktap.js"></script>
    <script src="js/recorderjs/recorder.js"></script>
    <script src="js/recorderjs/audioMain.js"></script>
    <script src="js/utility.js"></script>

    <link rel="stylesheet" href="/css/audioCss.css">
    <link rel="stylesheet" href="/css/trackTap.css">
</head>
<body >

<div >

    <div id="top" class="row panel-body ">
        <div id="cameraDiv" class="col-xs-2"></div>
        <div id="fill" class="col-xs-7"></div>
        <div id="timer_div" class="col-xs-1">
            <% include partials/timer.ejs %>
        </div>
    </div>

    <div style="display: none"><audio id="audioGlobal"></audio></div>
    <% if(userId && sessionId) { %>
        <div style="display: none" id="sessionId"><%=sessionId%></div>
        <div style="display: none" id="userId"><%=userId%></div>
    <%}%>
    <div>
        <div id="videoContent" class="text-center row" style="display: none; width:'60%'; height:'60%'">
            <video id="video" preload="auto"></video>
        </div>
        <div id="nameFacesContent" class="text-center" style="color : white;  display: none;" >
            <div id="4faces" style="color : white;  display: none; justify-content: center;align-items: center;">
                <div class="row">
                    <div class="responsive col-lg-6 ">
                        <div class="img">
                            <img id="face0" class="face-left">
                            <div class="name-left" id="name0"></div>
                        </div>
                    </div>
                    <div class="responsive col-lg-6">
                        <div class="img">
                            <img id="face1" class="face-right">
                            <div class="name-right" id="name1"></div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="responsive col-lg-6 ">
                        <div class="img">
                            <img id="face2"  class="face-left">
                            <div class="name-left" id="name2"></div>
                        </div>
                    </div>
                    <div class="responsive col-lg-6">
                        <div class="img">
                            <img id="face3" class="face-right">
                            <div class="name-right" id="name3"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="testFaceDiv" class="text-center row col-lg-6 col-lg-offset-3" style="display: none;">
                <div class="img col-lg-6">
                    <img id="testFace" width="70%" height="70%"  >
                </div>
            </div>
        </div>
        <div id="trackTap" style="display: none"  class="text-center row ">
            <table class="col-lg-6 col-lg-offset-2">
                <tr class="row"  >
                    <td id="td[0]" class="col-xs-3" onclick="hit(0)"></td>
                    <td id="td[1]" class="col-xs-3" onclick="hit(1)"></td>
                </tr>
                <tr  class="row"  >
                    <td id="td[2]" class="col-xs-3" onclick="hit(2)"></td>
                    <td id="td[3]" class="col-xs-3" onclick="hit(3)"></td>
                </tr>
                <tr  class="row" >
                    <td id="td[4]" class="col-xs-3" onclick="hit(4)"></td>
                    <td id="td[5]" class="col-xs-3" onclick="hit(5)"></td>
                </tr>
            </table>
        </div>
        <div  id="textContent" class ="row text-center"   >
            <!-- Volume checker-->
                Hear This ?
        </div>
        <div id="textShowAll" >
            <div  class="row" style="color:green">
                <div id="word0" class="word-left" onclick=toggleHighlight(this)><b></b></div>
            </div>
            <div  class="row" style="  color:green">
                <div  id="word1" class="word-right" onclick=toggleHighlight(this)><b></b></div>
            </div>
            <div  class="row" style="color:green">
                <div  id="word2" class="word-left" onclick=toggleHighlight(this)><b></b></div>
            </div>
            <div  class="row" style="  color:green">
                <div  id="word3" class="word-right" onclick=toggleHighlight(this)><b></b></div>
            </div>
            <div  class="row" style="  color:green">
                <div  id="word4" class="word-left" onclick=toggleHighlight(this)><b></b></div>
            </div>
            <div  class="row" style="  color:green">
                <div  id="word5" class="word-right" onclick=toggleHighlight(this)><b></b></div>
            </div>
        </div>
    </div>

    <div id="my_result"></div>

    <div id="bottom">
        <canvas id="analyser"  ></canvas>
        <img id="analyserImg" src="images/SparklingStars.gif" width="100%" height="100%"/>

        <div  id="footer" >
            <button id="nextButton" class="btn-primary btn-lg"style="height:100%; border-radius:0;">Click Here To Start</button>
        </div>
    </div>

</div>


<script src="js/camera.js"></script>
<script src="js/itemProcessor/quickLitProcessor.js"></script>
<script src="js/itemProcessor/instructionProcessor.js"></script>
<script src="js/itemProcessor/audioQuestionProcessor.js"></script>
<script src="js/itemProcessor/nameTheFaceProcessor.js"></script>
<script src="js/itemProcessor/describeVideoProcessor.js"></script>
<script src="js/itemProcessor/trackTapProcessor.js"></script>
<script src="js/itemProcessor/retellStoryProcessor.js"></script>
<script src="js/itemProcessor/audioProbeProcessor.js"></script>
<script src="js/itemProcessor/volumeCheckProcessor.js"></script>
<script src="js/itemProcessor/microphoneCheckProcessor.js"></script>


<script>
    var audioFolder = window.location.origin + "/assets/Audio/items/"
    var videoFolder = window.location.origin  + "/assets/Video/"
    var imageFolder = "assets/Images/"
    var nameFacesImageFolder = "assets/Images/2062/"
    var postFlacUrl = "/api/upload/audio/"
    var takePictureIntervalInMilliSeconds = 120000;
    var takePictureIntervalId = null;
    var analyser = document.getElementById("analyser");
    var video = document.getElementById("video");
    var camera = document.getElementById("camera");
    var videoContent = document.getElementById("videoContent");
    var nextButton = document.getElementById("nextButton");
    var instr = document.getElementById("textContent");
    var trackTap = document.getElementById("trackTap");
    var nameFacesContent = document.getElementById("nameFacesContent");
    var audioGlobal = document.getElementById('audioGlobal');

    var analyserImg = document.getElementById("analyserImg");
    var sessionId = document.getElementById("sessionId").innerHTML;
    var userId = document.getElementById("userId").innerHTML;

    var selectedWords = new Set();
    var wordTouchMap = {};
    var questionList;

    var item,itemStatus;
    var itemResponse = {}, itemSubResponse = {};
    var responseStartTime, responseEndTime, subResponseStartTime, subResponseEndTime, subResponseStart,subResponseDuration;
    var index = -1;
    var pictureId = 0;
    var picStartTime = null;
    var picItemResponse = {};
    var interviewStartTime, interviewEndTime;
    JL("client").info("Interview started");


    function takePictureAndUpload() {
        JL("client").info("Taking picture for the interviewer with pictureId: " + (++pictureId));

        var picture = {};
        picture.takenItem = item.item;
        picture.takenType = item.type;
        picture.takenTime = (new Date()).toUTCString();
        picture.pngFileName = 'camera'+pictureId+'.png';
        picture.elapsedTime = (new Date() - interviewStartTime)/1000;
        //TODO: upload picture to S3
        takeSnapshot(function(){
            JL("client").info("Uploaded picture for the interviewer with pictureId: " + pictureId);
            $.post('/api/session/cameraPictureSessionData', {pictureInfo: picture}, function(data) {
                if (data != "ok") {
                    var errorMessage = "Upload cameraPicture Session data failed with message: " + data;
                    console.error(errorMessage);
                    JL("client").error(errorMessage);
                } else {
                    JL("client").error("Upload CameraPicture succeeded.");
                }
            });
        })

    }

    function postItemResponse(stream) {
        console.log("start postItemResponse");
        $.post("/api/session/updateSessionState", {itemResponse : itemResponse}, function(data) {
            if(data!="ok") {
                var errorMessage = "Upload response for testItem type:"+item.type+", item:"+item.item + " failed with message: " + data;
                console.error(errorMessage);
                JL("client").error(errorMessage);
            } else {
                JL("client").error("Upload response for testItem type:"+item.type+", item:"+item.item + " succeeded.");
                //processItem(stream);
            }
        })
        processItem(stream);
    }

    function postPictureResponseAndMarkEnd() {
        picItemResponse.endTime = (new Date()).toUTCString();
        picItemResponse.status = "MAX_TIMEOUT";
        //TODO mark end and redirect to thank you page
        $.post("/api/session/endSession", {cameraPictureResponse : picItemResponse}, function(data) {
            if(data!="ok") {
                var errorMessage = "Upload picture response for testItem type:"+item.type+", item:"+item.item + " failed with message: " + data;
                console.error(errorMessage);
                JL("client").error(errorMessage);
            } else {
                JL("client").info("Upload picture response for testItem type:"+item.type+", item:"+item.item + " succeeded.");
                //end the interview
                JL("client").info("Interview completed.")
                var instr = document.getElementById("textContent");
                instr.innerHTML = "All reponse and images are uploaded. We are done. Thanks you.";
                instr.style.display="inline";
                setTimeout(function () {
                   window.location.href= "/";
                }, 5000);

            }
        })
    }

    function initializeItemProcessingVariables() {
        itemResponse = {};
        itemResponse.subresponses = [];
        itemSubResponse = {};
        nextButton.style.display = 'none';
        nextButton.onclick=function(){}
    }

    function processItem(stream) {
        ++index;
        if(index>=questionList.length) {
            clearInterval(takePictureIntervalId);
            interviewEndTime = new Date();
            postPictureResponseAndMarkEnd();
            return;
        }
        item = questionList[index];
        JL("client").info("Enter processItem for :"+item.type+", item:"+item.item);
        console.log("Enter processItem for :"+item.type+", item:"+item.item);
        initializeItemProcessingVariables();
        itemResponse.item = item;
        switch (item.type) {
            case 2000:
                if(item.item == 1) {
                    processVolumeChecker(stream, item);
                } else if(item.item == 2) {
                    processMicrophoneChecker(stream, item);
                } else if(item.item==3){
                    picItemResponse.item = item;
                    picItemResponse.pictures=[];
                    picItemResponse.itemType="CameraPicture";
                    picItemResponse.startTime = (picStartTime == null ? (new Date()).toUTCString() : picStartTime);
                    picItemResponse.afilename = "";
                    takePictureIntervalInMilliSeconds = item.mtimeout*1000;
                    interviewStartTime = new Date();
                    takePictureAndUpload();
                    takePictureIntervalId = setInterval(takePictureAndUpload, takePictureIntervalInMilliSeconds);
                    processInstruction(stream, item);
                }
                break;
            case 2023:
                processDescribeSilentVideo(stream, item)
                break;
            case 2001:
            case 2041:
            case 2044:
            case 2065:
            //case 2066:
            case 2067:
            case 2068:
            case 2069:
            case 2070:
            case 2071:
            case 2072:
            case 2073:
            case 2074:
            case 2091:
            case 2094:
            case 2095:
            case 2096:
            case 2098:
            case 2100:
                if(item.item==0) processInstruction(stream, item); //item 0 has no recording
                else processAudioQuestion(stream, item);
                break;
            case 2032:
                processTrackTap(stream, item);
                break;
            case 2040:
                if(item.item==0) {
                    processInstruction(stream, item);
                } //item 0 has no recording
                else {
                    processRetellStory(stream, item);
                }
                break;
            case 2066:
                if(item.item==0) {
                    processInstruction(stream, item);
                } //item 0 has no recording
                else {
                    processAudioProbe(stream, item);
                }
                break;
            case 2062: //bypass the following two for now
                if(item.item==0) {
                    processInstruction(stream, item);
                } //item 0 has no recording
                else {
                    processNameTheFace(stream, item);
                }
                break;
            case 2064:
                processQuickLit(stream, item);
                break;
            default:
                JL('client').info("Skipping not defined item: " + item.type+"."+item.item);
                processItem(stream);
                break;
        }
    }

    function startResponse(item, hasSubResponse, type){

    }
    function endRespone(item, hasSubResponse, type) {

    }

    function startSubResponse(item) {

    }
    function endSubResponse(item, status) {

    }
    function playAudioGlobalAndSetOnEndFunction(src, onendFunc) {
        JL("client").info("Enter playing audio for :"+src);
        nextButton.style.display = 'none';
        audioGlobal.src = src;
        audioGlobal.play();
        analyserImg.style.display="inline";
        analyser.style.display = "none";
        audioGlobal.onended = onendFunc;
    }

    Webcam.set({
        width: $("body").innerWidth()/6,
        height: $("body").innerWidth()/8,
        image_format: 'png'
    });
    Webcam.attach('#cameraDiv');

    function takeSnapshot(callback) {
        Webcam.snap( function(data_uri) {
            // snap complete, image data is in 'data_uri'
            var picName = 'camera'+pictureId+'.png';
            Webcam.upload( data_uri, '/api/upload/picture/'+picName, function(code, text) {
                if(text=='ok') {
                    callback();
                }
            } );

        } );
    }

    $.get("/api/remainingTest", function(data) {
        questionList = data;
        if(data.length>2 && data[2].type!=2000) {
            $.get("/api/currentPictureId", function(result) {
                if(result!='failed' && result!='') {
                    pictureId = result.maxPictureId;
                    picStartTime = result.minStartTime;
                }
            });
        }
        navigator.getUserMedia({audio: true, video: false}, function (stream) {
            nextButton.onclick = function () {
                var videoItem = _.filter(data,function(item) {
                    return item.type==2023;
                });
                if(videoItem.length>0) { //Assume there's only one video item;
                    JL('client').info("Preloading video: " + videoItem[0].video);
                    video.src = videoFolder + videoItem[0].video;
                    video.load();
                }
                processItem(stream);
            }
        }, function (error) {
            audioOrVideoNotEnabled("Please make sure your microphone is enabled.");
        });
    })

</script>

</body>
</html>